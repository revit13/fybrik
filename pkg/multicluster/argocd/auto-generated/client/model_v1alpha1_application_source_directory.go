/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationSourceDirectory struct for V1alpha1ApplicationSourceDirectory
type V1alpha1ApplicationSourceDirectory struct {
	Exclude *string `json:"exclude,omitempty"`
	Include *string `json:"include,omitempty"`
	Jsonnet *V1alpha1ApplicationSourceJsonnet `json:"jsonnet,omitempty"`
	Recurse *bool `json:"recurse,omitempty"`
}

// NewV1alpha1ApplicationSourceDirectory instantiates a new V1alpha1ApplicationSourceDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationSourceDirectory() *V1alpha1ApplicationSourceDirectory {
	this := V1alpha1ApplicationSourceDirectory{}
	return &this
}

// NewV1alpha1ApplicationSourceDirectoryWithDefaults instantiates a new V1alpha1ApplicationSourceDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationSourceDirectoryWithDefaults() *V1alpha1ApplicationSourceDirectory {
	this := V1alpha1ApplicationSourceDirectory{}
	return &this
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceDirectory) GetExclude() string {
	if o == nil || o.Exclude == nil {
		var ret string
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceDirectory) GetExcludeOk() (*string, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceDirectory) HasExclude() bool {
	if o != nil && o.Exclude != nil {
		return true
	}

	return false
}

// SetExclude gets a reference to the given string and assigns it to the Exclude field.
func (o *V1alpha1ApplicationSourceDirectory) SetExclude(v string) {
	o.Exclude = &v
}

// GetInclude returns the Include field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceDirectory) GetInclude() string {
	if o == nil || o.Include == nil {
		var ret string
		return ret
	}
	return *o.Include
}

// GetIncludeOk returns a tuple with the Include field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceDirectory) GetIncludeOk() (*string, bool) {
	if o == nil || o.Include == nil {
		return nil, false
	}
	return o.Include, true
}

// HasInclude returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceDirectory) HasInclude() bool {
	if o != nil && o.Include != nil {
		return true
	}

	return false
}

// SetInclude gets a reference to the given string and assigns it to the Include field.
func (o *V1alpha1ApplicationSourceDirectory) SetInclude(v string) {
	o.Include = &v
}

// GetJsonnet returns the Jsonnet field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceDirectory) GetJsonnet() V1alpha1ApplicationSourceJsonnet {
	if o == nil || o.Jsonnet == nil {
		var ret V1alpha1ApplicationSourceJsonnet
		return ret
	}
	return *o.Jsonnet
}

// GetJsonnetOk returns a tuple with the Jsonnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceDirectory) GetJsonnetOk() (*V1alpha1ApplicationSourceJsonnet, bool) {
	if o == nil || o.Jsonnet == nil {
		return nil, false
	}
	return o.Jsonnet, true
}

// HasJsonnet returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceDirectory) HasJsonnet() bool {
	if o != nil && o.Jsonnet != nil {
		return true
	}

	return false
}

// SetJsonnet gets a reference to the given V1alpha1ApplicationSourceJsonnet and assigns it to the Jsonnet field.
func (o *V1alpha1ApplicationSourceDirectory) SetJsonnet(v V1alpha1ApplicationSourceJsonnet) {
	o.Jsonnet = &v
}

// GetRecurse returns the Recurse field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceDirectory) GetRecurse() bool {
	if o == nil || o.Recurse == nil {
		var ret bool
		return ret
	}
	return *o.Recurse
}

// GetRecurseOk returns a tuple with the Recurse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceDirectory) GetRecurseOk() (*bool, bool) {
	if o == nil || o.Recurse == nil {
		return nil, false
	}
	return o.Recurse, true
}

// HasRecurse returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceDirectory) HasRecurse() bool {
	if o != nil && o.Recurse != nil {
		return true
	}

	return false
}

// SetRecurse gets a reference to the given bool and assigns it to the Recurse field.
func (o *V1alpha1ApplicationSourceDirectory) SetRecurse(v bool) {
	o.Recurse = &v
}

func (o V1alpha1ApplicationSourceDirectory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	if o.Include != nil {
		toSerialize["include"] = o.Include
	}
	if o.Jsonnet != nil {
		toSerialize["jsonnet"] = o.Jsonnet
	}
	if o.Recurse != nil {
		toSerialize["recurse"] = o.Recurse
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationSourceDirectory struct {
	value *V1alpha1ApplicationSourceDirectory
	isSet bool
}

func (v NullableV1alpha1ApplicationSourceDirectory) Get() *V1alpha1ApplicationSourceDirectory {
	return v.value
}

func (v *NullableV1alpha1ApplicationSourceDirectory) Set(val *V1alpha1ApplicationSourceDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationSourceDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationSourceDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationSourceDirectory(val *V1alpha1ApplicationSourceDirectory) *NullableV1alpha1ApplicationSourceDirectory {
	return &NullableV1alpha1ApplicationSourceDirectory{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationSourceDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationSourceDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


