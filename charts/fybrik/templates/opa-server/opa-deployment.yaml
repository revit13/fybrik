{{- $autoFlag := and .Values.coordinator.enabled (eq .Values.coordinator.policyManager "opa") }}
{{- $opaConnectorEnabled := include "fybrik.isEnabled" (tuple .Values.opaConnector.enabled $autoFlag) }}
{{- if include "fybrik.isEnabled" (tuple .Values.opaServer.enabled $opaConnectorEnabled) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opa
  labels:
    app.kubernetes.io/component: opa
    {{- include "fybrik.labels" . | nindent 4 }}
spec:
  {{- if not .Values.opaServer.autoscaling.enabled }}
  replicas: {{ .Values.opaServer.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/component: opa
      {{- include "fybrik.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.opaServer.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/component: opa
        {{- include "fybrik.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.opaServer.serviceAccount.name }}
      volumes:
        - name: bootstrap
          emptyDir: {}
        - name: data
          emptyDir:
            sizeLimit: {{ .Values.opaServer.dataDirSizeLimit }}
        {{- if .Values.opaServer.tls.certs.certSecretName }}
        - name: tls-cert
          secret:
            defaultMode: 420
            secretName: {{ .Values.opaServer.tls.certs.certSecretName }}
        {{- end }}
        {{- if .Values.opaServer.tls.certs.cacertSecretName }}
        - name: tls-cacert
          secret:
            defaultMode: 420
            secretName: {{ .Values.opaServer.tls.certs.cacertSecretName }}
        {{- end }}
      securityContext:
      {{- include "fybrik.processPodSecurityContext" (dict "context" . "podSecurityContext" .Values.opaServer.podSecurityContext) | nindent 8 }}
      initContainers:
        - name: initpolicy
          image: {{ .Values.opaServer.kubemgmt.image }}
          command:
          - /bin/sh
          - -c
          - |
            {{- $files := .Files }}
            {{- range $path, $_ :=  $files.Glob  "files/opa-server/policy-lib/**.rego" }}
            {{- $fileName := include "fybrik.opaServerPolicyFileName" (tuple $path ) }}
            {{- printf "\ncat <<EOF > /bootstrap/policy-lib-%s" $fileName | indent 12 }}
            {{ $files.Get $path | indent 12 }}
            EOF
            {{ end }}
            {{- if .Values.opaServer.bootstrapPolicies}}
            {{- range $policyName, $policy := .Values.opaServer.bootstrapPolicies }} 
            {{- printf "\ncat > /bootstrap/%s.rego <<EOF" $policyName  | indent 12 }}
            {{ $policy | indent 12 }}
            EOF
            {{ end }}
            {{ end }}
          volumeMounts:
            - name: bootstrap
              mountPath: /bootstrap
      containers:
        - name: opa
          securityContext:
            {{- mergeOverwrite (deepCopy .Values.global.containerSecurityContext) .Values.opaServer.containerSecurityContext | toYaml | nindent 12 }}
          image: {{ .Values.opaServer.image }}
          imagePullPolicy: {{ .Values.opaServer.imagePullPolicy | default .Values.global.imagePullPolicy }}
          args:
            {{- toYaml .Values.opaServer.args | nindent 12 }}
            - "/bootstrap"
          ports:
            {{- if .Values.opaServer.tls.use_tls }}
            - name: https
            {{- else }}
            - name: http
            {{- end }}
              containerPort: {{ .Values.opaServer.service.port }}
              protocol: TCP
          {{- if .Values.opaServer.enableReadinessProbe }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.opaServer.service.port }}
              {{- if .Values.opaServer.tls.use_tls }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            {{- mergeOverwrite (deepCopy .Values.global.readinessProbe) .Values.opaServer.readinessProbe | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.opaServer.enableLivenessProbe }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.opaServer.service.port }}
              {{- if .Values.opaServer.tls.use_tls }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
            {{- mergeOverwrite (deepCopy .Values.global.livenessProbe) .Values.opaServer.livenessProbe | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.opaServer.resources | nindent 12 }}
          volumeMounts:
            - name: bootstrap
              mountPath: /bootstrap
            - name: data
              mountPath: {{ include "fybrik.getDataDir" . }}
            {{- if .Values.opaServer.tls.certs.certSecretName }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "tls-cert" ) }}
              name: tls-cert
              readOnly: true
            {{- end }}
            {{- if .Values.opaServer.tls.certs.cacertSecretName }}
            - mountPath: {{ include "fybrik.getDataSubdir" ( tuple "tls-cacert" ) }}
              name: tls-cacert
              readOnly: true
            {{- end }}

        - name: kube-mgmt
          image: {{ .Values.opaServer.kubemgmt.image }}
          args:
          - --require-policy-label
          - --policies={{ .Release.Namespace }}
          - --enable-data
      {{- with .Values.opaServer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.opaServer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.opaServer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
