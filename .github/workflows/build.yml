name: Build

on:
  push:
    branches-ignore:
      - 'site'
    tags:
      - '*'
  pull_request:
    branches:
      - master

env:
  GO_VERSION: 1.17

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Verify
      run: |
        make generate manifests generate-docs verify
        git diff --exit-code
  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Test
      run: make test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Install tools
      run: make install-tools
    - name: Integration tests
      run: make run-integration-tests
    - run: docker images
    - name: Save images
      if: ${{ github.event_name != 'pull_request' }}
      run: make save-images
    - name: Upload images
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-artifact@v2
      with:
        name: images
        path: images.tar
        retention-days: 1

  notebook-sample:
    name: Notebook sample
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Install tools
      run: make install-tools
    - name: Notebook tests
      run: make run-notebook-tests

  tekton-pipelines:
    name: Tekton Tests
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: install nfs rpms
      run: sudo apt-get update && sudo apt-get install -y nfs-kernel-server nfs-common && sudo modprobe nfsd && sudo modprobe nfs
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Install tools
      run: make install-tools
    - name: Integration tests
      env:
        image_source_repo_password: "fake"
        github: github.com
        run_tkn: 1
        dockerhub_hostname: docker.io
        git_user: fake@fake.com
        image_repo: kind-registry:5000
        image_source_repo_username: fake@fake.com 
        GH_TOKEN: fake
      run: pushd hack/tools/ && ./create_kind.sh && docker info && popd && . pipeline/source-external.sh && skip_tests=false kind=true github_workspace=${{ github.workspace }} pipeline/bootstrap-pipeline.sh fybrik-system

  push_images:
    name: Push images
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
    needs: [verify, test, integration-tests]
    if: ${{ github.event_name != 'pull_request' && github.repository == 'fybrik/fybrik' }}
    steps:
    - uses: actions/checkout@v2
    - name: Download artifact
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/download-artifact@v2
      with:
        name: images
    - name: Load images
      if: ${{ github.event_name != 'pull_request' }}
      run: docker load -i images.tar
    - run: docker images
    # Versions are created as follows (In helm 3.7 OCI reference tags must be valid SemVer):
    # - Tags starting with v will be released as what comes after `v`. (e.g. refs/tags/v1.0 -> 1.0).
    #   In addition, a version with tag `latest` will be released for docker image tags and `0.0.0-latest` for
    #   helm chart OCI reference tags.
    # - Release branches will be released as the release number (e.g. refs/heads/releases/1.0 -> 1.0-rc).
    # - Other branches (e.g. master) will be released with branch name as version for the docker images.
    #   For the helm chart OCI reference tag 0.0.0-<branch-name> will be used.
    - id: version
      name: Infer version
      run: |
        version="${GITHUB_REF#refs/tags/v}"
        echo "HELM_TAG=${version}" >> $GITHUB_ENV
        push_tag_event='true'
        if  [[ $version == refs/* ]] ;
        then
            push_tag_event='false'
            branch="${GITHUB_REF#refs/heads/}"
            version=$branch
            echo "HELM_TAG=0.0.0-${version}" >> $GITHUB_ENV
        fi
        if [[ $version == releases/* ]] ;
        then
           releaseVersion="${GITHUB_REF#refs/heads/releases/}"
           version="$releaseVersion-rc"
           echo "HELM_TAG=$releaseVersion-rc" >> $GITHUB_ENV
        fi
        echo ::set-output name=version::$version
        echo ::set-output name=push_tag_event::$push_tag_event
    - name: Publish images
      if: ${{ github.event_name != 'pull_request' }}
      env:
        DOCKER_PUBLIC_TAGNAME:  ${{ steps.version.outputs.version }}
      run: make docker-retag-and-push-public && make helm-push-public
    - name: Publish latest image tag on push tag event
      if: github.event_name != 'pull_request' && steps.version.outputs.push_tag_event == 'true'
      env:
        DOCKER_PUBLIC_TAGNAME: 'latest'
        HELM_TAG: '0.0.0-latest'
      run: make docker-retag-and-push-public && make helm-push-public
