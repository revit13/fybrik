name: Build

on:
  push:
    branches-ignore:
      - 'site'
    tags:
      - '*'
  pull_request:
    branches:
      - master

env:
  GO_VERSION: 1.17
  # the newest supported K8s version and its respective kind image
  NEW_K8S_VERSION: v1.22.0@sha256:b8bda84bb3a190e6e028b1760d277454a72267a5454b57db34437c34a588d047
  # the oldest supported K8s version and its respective kind image
  OLD_K8S_VERSION: v1.19.11@sha256:07db187ae84b4b7de440a73886f008cf903fcf5764ba8106a9fd5243d6f32729

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: install json-schema-generator
      run: ./hack/tools/install_json-schema-generator.sh
    - name: Verify
      run: |
        make generate manifests generate-docs verify
        git diff --exit-code
  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Install tools
      run: make install-tools
    - name: install json-schema-generator
      run: ./hack/tools/install_json-schema-generator.sh
    - name: Test
      run: make test

  push_images:
    name: Push images
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
    if: ${{ github.event_name != 'pull_request' }}
    steps:
    - uses: actions/checkout@v2
    # Versions are created as follows (In helm 3.7 OCI reference tags must be valid SemVer):
    # - Tags starting with v will be released as what comes after `v`. (e.g. refs/tags/v1.0 -> 1.0).
    #   In addition, a version with tag `latest` will be released for docker image tags and `0.0.0-latest` for
    #   helm chart OCI reference tags.
    # - Release branches will be released as the release number (e.g. refs/heads/releases/1.0 -> 1.0-rc).
    # - Other branches (e.g. master) will be released with branch name as version for the docker images.
    #   For the helm chart OCI reference tag 0.0.0-<branch-name> will be used.
    - id: version
      name: Infer version
      run: |
        publish_images='false'
        if [[ ${GITHUB_REF} == refs/tags/* ]] ;
        then 
            publish_images='true'
            version="${GITHUB_REF#refs/tags/v}"
            echo "HELM_TAG=${version}" >> $GITHUB_ENV
            echo "version1 ${version}"
            echo "GITHUB_REF ${GITHUB_REF}"
        elif  [[ ${GITHUB_REF} == refs/heads/master ]] ;
        then
            publish_images='true'
            version=master
            echo "HELM_TAG=0.0.0-master" >> $GITHUB_ENV
            echo "version2 ${version}"
            echo "GITHUB_REF ${GITHUB_REF}"
        fi
        echo ::set-output name=version::$version
        echo ::set-output name=publish_images::$publish_images
        echo "version77 ${version}"
    - name: Publish images
      if: ${{ steps.version.outputs.publish_images == 'true' }}
      env:
        DOCKER_PUBLIC_TAGNAME:  ${{ steps.version.outputs.version }}
      run: echo "hi"

