/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1EventList EventList is a list of events.
type V1EventList struct {
	Items    *[]V1Event  `json:"items,omitempty"`
	Metadata *V1ListMeta `json:"metadata,omitempty"`
}

// NewV1EventList instantiates a new V1EventList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EventList() *V1EventList {
	this := V1EventList{}
	return &this
}

// NewV1EventListWithDefaults instantiates a new V1EventList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EventListWithDefaults() *V1EventList {
	this := V1EventList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *V1EventList) GetItems() []V1Event {
	if o == nil || o.Items == nil {
		var ret []V1Event
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EventList) GetItemsOk() (*[]V1Event, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *V1EventList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []V1Event and assigns it to the Items field.
func (o *V1EventList) SetItems(v []V1Event) {
	o.Items = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1EventList) GetMetadata() V1ListMeta {
	if o == nil || o.Metadata == nil {
		var ret V1ListMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EventList) GetMetadataOk() (*V1ListMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1EventList) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ListMeta and assigns it to the Metadata field.
func (o *V1EventList) SetMetadata(v V1ListMeta) {
	o.Metadata = &v
}

func (o V1EventList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableV1EventList struct {
	value *V1EventList
	isSet bool
}

func (v NullableV1EventList) Get() *V1EventList {
	return v.value
}

func (v *NullableV1EventList) Set(val *V1EventList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EventList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EventList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EventList(val *V1EventList) *NullableV1EventList {
	return &NullableV1EventList{value: val, isSet: true}
}

func (v NullableV1EventList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EventList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
