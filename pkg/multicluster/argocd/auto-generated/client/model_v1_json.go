/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1JSON JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
type V1JSON struct {
	Raw *string `json:"raw,omitempty"`
}

// NewV1JSON instantiates a new V1JSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1JSON() *V1JSON {
	this := V1JSON{}
	return &this
}

// NewV1JSONWithDefaults instantiates a new V1JSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1JSONWithDefaults() *V1JSON {
	this := V1JSON{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *V1JSON) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1JSON) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *V1JSON) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *V1JSON) SetRaw(v string) {
	o.Raw = &v
}

func (o V1JSON) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	return json.Marshal(toSerialize)
}

type NullableV1JSON struct {
	value *V1JSON
	isSet bool
}

func (v NullableV1JSON) Get() *V1JSON {
	return v.value
}

func (v *NullableV1JSON) Set(val *V1JSON) {
	v.value = val
	v.isSet = true
}

func (v NullableV1JSON) IsSet() bool {
	return v.isSet
}

func (v *NullableV1JSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1JSON(val *V1JSON) *NullableV1JSON {
	return &NullableV1JSON{value: val, isSet: true}
}

func (v NullableV1JSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1JSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
