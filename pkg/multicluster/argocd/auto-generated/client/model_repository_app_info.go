/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// RepositoryAppInfo struct for RepositoryAppInfo
type RepositoryAppInfo struct {
	Path *string `json:"path,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRepositoryAppInfo instantiates a new RepositoryAppInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryAppInfo() *RepositoryAppInfo {
	this := RepositoryAppInfo{}
	return &this
}

// NewRepositoryAppInfoWithDefaults instantiates a new RepositoryAppInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryAppInfoWithDefaults() *RepositoryAppInfo {
	this := RepositoryAppInfo{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RepositoryAppInfo) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryAppInfo) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RepositoryAppInfo) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RepositoryAppInfo) SetPath(v string) {
	o.Path = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RepositoryAppInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryAppInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RepositoryAppInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RepositoryAppInfo) SetType(v string) {
	o.Type = &v
}

func (o RepositoryAppInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryAppInfo struct {
	value *RepositoryAppInfo
	isSet bool
}

func (v NullableRepositoryAppInfo) Get() *RepositoryAppInfo {
	return v.value
}

func (v *NullableRepositoryAppInfo) Set(val *RepositoryAppInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryAppInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryAppInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryAppInfo(val *RepositoryAppInfo) *NullableRepositoryAppInfo {
	return &NullableRepositoryAppInfo{value: val, isSet: true}
}

func (v NullableRepositoryAppInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryAppInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


