/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// ClusterHelp struct for ClusterHelp
type ClusterHelp struct {
	BinaryUrls *map[string]string `json:"binaryUrls,omitempty"`
	ChatText   *string            `json:"chatText,omitempty"`
	ChatUrl    *string            `json:"chatUrl,omitempty"`
}

// NewClusterHelp instantiates a new ClusterHelp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterHelp() *ClusterHelp {
	this := ClusterHelp{}
	return &this
}

// NewClusterHelpWithDefaults instantiates a new ClusterHelp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterHelpWithDefaults() *ClusterHelp {
	this := ClusterHelp{}
	return &this
}

// GetBinaryUrls returns the BinaryUrls field value if set, zero value otherwise.
func (o *ClusterHelp) GetBinaryUrls() map[string]string {
	if o == nil || o.BinaryUrls == nil {
		var ret map[string]string
		return ret
	}
	return *o.BinaryUrls
}

// GetBinaryUrlsOk returns a tuple with the BinaryUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterHelp) GetBinaryUrlsOk() (*map[string]string, bool) {
	if o == nil || o.BinaryUrls == nil {
		return nil, false
	}
	return o.BinaryUrls, true
}

// HasBinaryUrls returns a boolean if a field has been set.
func (o *ClusterHelp) HasBinaryUrls() bool {
	if o != nil && o.BinaryUrls != nil {
		return true
	}

	return false
}

// SetBinaryUrls gets a reference to the given map[string]string and assigns it to the BinaryUrls field.
func (o *ClusterHelp) SetBinaryUrls(v map[string]string) {
	o.BinaryUrls = &v
}

// GetChatText returns the ChatText field value if set, zero value otherwise.
func (o *ClusterHelp) GetChatText() string {
	if o == nil || o.ChatText == nil {
		var ret string
		return ret
	}
	return *o.ChatText
}

// GetChatTextOk returns a tuple with the ChatText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterHelp) GetChatTextOk() (*string, bool) {
	if o == nil || o.ChatText == nil {
		return nil, false
	}
	return o.ChatText, true
}

// HasChatText returns a boolean if a field has been set.
func (o *ClusterHelp) HasChatText() bool {
	if o != nil && o.ChatText != nil {
		return true
	}

	return false
}

// SetChatText gets a reference to the given string and assigns it to the ChatText field.
func (o *ClusterHelp) SetChatText(v string) {
	o.ChatText = &v
}

// GetChatUrl returns the ChatUrl field value if set, zero value otherwise.
func (o *ClusterHelp) GetChatUrl() string {
	if o == nil || o.ChatUrl == nil {
		var ret string
		return ret
	}
	return *o.ChatUrl
}

// GetChatUrlOk returns a tuple with the ChatUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterHelp) GetChatUrlOk() (*string, bool) {
	if o == nil || o.ChatUrl == nil {
		return nil, false
	}
	return o.ChatUrl, true
}

// HasChatUrl returns a boolean if a field has been set.
func (o *ClusterHelp) HasChatUrl() bool {
	if o != nil && o.ChatUrl != nil {
		return true
	}

	return false
}

// SetChatUrl gets a reference to the given string and assigns it to the ChatUrl field.
func (o *ClusterHelp) SetChatUrl(v string) {
	o.ChatUrl = &v
}

func (o ClusterHelp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BinaryUrls != nil {
		toSerialize["binaryUrls"] = o.BinaryUrls
	}
	if o.ChatText != nil {
		toSerialize["chatText"] = o.ChatText
	}
	if o.ChatUrl != nil {
		toSerialize["chatUrl"] = o.ChatUrl
	}
	return json.Marshal(toSerialize)
}

type NullableClusterHelp struct {
	value *ClusterHelp
	isSet bool
}

func (v NullableClusterHelp) Get() *ClusterHelp {
	return v.value
}

func (v *NullableClusterHelp) Set(val *ClusterHelp) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterHelp) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterHelp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterHelp(val *ClusterHelp) *NullableClusterHelp {
	return &NullableClusterHelp{value: val, isSet: true}
}

func (v NullableClusterHelp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterHelp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
