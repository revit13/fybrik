/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// NotificationServiceList struct for NotificationServiceList
type NotificationServiceList struct {
	Items *[]NotificationService `json:"items,omitempty"`
}

// NewNotificationServiceList instantiates a new NotificationServiceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationServiceList() *NotificationServiceList {
	this := NotificationServiceList{}
	return &this
}

// NewNotificationServiceListWithDefaults instantiates a new NotificationServiceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationServiceListWithDefaults() *NotificationServiceList {
	this := NotificationServiceList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *NotificationServiceList) GetItems() []NotificationService {
	if o == nil || o.Items == nil {
		var ret []NotificationService
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationServiceList) GetItemsOk() (*[]NotificationService, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *NotificationServiceList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []NotificationService and assigns it to the Items field.
func (o *NotificationServiceList) SetItems(v []NotificationService) {
	o.Items = &v
}

func (o NotificationServiceList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationServiceList struct {
	value *NotificationServiceList
	isSet bool
}

func (v NullableNotificationServiceList) Get() *NotificationServiceList {
	return v.value
}

func (v *NullableNotificationServiceList) Set(val *NotificationServiceList) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationServiceList) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationServiceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationServiceList(val *NotificationServiceList) *NullableNotificationServiceList {
	return &NullableNotificationServiceList{value: val, isSet: true}
}

func (v NullableNotificationServiceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationServiceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


