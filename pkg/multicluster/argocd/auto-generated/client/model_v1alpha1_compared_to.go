/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ComparedTo struct for V1alpha1ComparedTo
type V1alpha1ComparedTo struct {
	Destination *V1alpha1ApplicationDestination `json:"destination,omitempty"`
	Source      *V1alpha1ApplicationSource      `json:"source,omitempty"`
	Sources     *[]V1alpha1ApplicationSource    `json:"sources,omitempty"`
}

// NewV1alpha1ComparedTo instantiates a new V1alpha1ComparedTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ComparedTo() *V1alpha1ComparedTo {
	this := V1alpha1ComparedTo{}
	return &this
}

// NewV1alpha1ComparedToWithDefaults instantiates a new V1alpha1ComparedTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ComparedToWithDefaults() *V1alpha1ComparedTo {
	this := V1alpha1ComparedTo{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *V1alpha1ComparedTo) GetDestination() V1alpha1ApplicationDestination {
	if o == nil || o.Destination == nil {
		var ret V1alpha1ApplicationDestination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ComparedTo) GetDestinationOk() (*V1alpha1ApplicationDestination, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *V1alpha1ComparedTo) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given V1alpha1ApplicationDestination and assigns it to the Destination field.
func (o *V1alpha1ComparedTo) SetDestination(v V1alpha1ApplicationDestination) {
	o.Destination = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V1alpha1ComparedTo) GetSource() V1alpha1ApplicationSource {
	if o == nil || o.Source == nil {
		var ret V1alpha1ApplicationSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ComparedTo) GetSourceOk() (*V1alpha1ApplicationSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V1alpha1ComparedTo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given V1alpha1ApplicationSource and assigns it to the Source field.
func (o *V1alpha1ComparedTo) SetSource(v V1alpha1ApplicationSource) {
	o.Source = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *V1alpha1ComparedTo) GetSources() []V1alpha1ApplicationSource {
	if o == nil || o.Sources == nil {
		var ret []V1alpha1ApplicationSource
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ComparedTo) GetSourcesOk() (*[]V1alpha1ApplicationSource, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *V1alpha1ComparedTo) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []V1alpha1ApplicationSource and assigns it to the Sources field.
func (o *V1alpha1ComparedTo) SetSources(v []V1alpha1ApplicationSource) {
	o.Sources = &v
}

func (o V1alpha1ComparedTo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ComparedTo struct {
	value *V1alpha1ComparedTo
	isSet bool
}

func (v NullableV1alpha1ComparedTo) Get() *V1alpha1ComparedTo {
	return v.value
}

func (v *NullableV1alpha1ComparedTo) Set(val *V1alpha1ComparedTo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ComparedTo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ComparedTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ComparedTo(val *V1alpha1ComparedTo) *NullableV1alpha1ComparedTo {
	return &NullableV1alpha1ComparedTo{value: val, isSet: true}
}

func (v NullableV1alpha1ComparedTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ComparedTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
