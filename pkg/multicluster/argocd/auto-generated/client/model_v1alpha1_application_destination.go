/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationDestination struct for V1alpha1ApplicationDestination
type V1alpha1ApplicationDestination struct {
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Server    *string `json:"server,omitempty"`
}

// NewV1alpha1ApplicationDestination instantiates a new V1alpha1ApplicationDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationDestination() *V1alpha1ApplicationDestination {
	this := V1alpha1ApplicationDestination{}
	return &this
}

// NewV1alpha1ApplicationDestinationWithDefaults instantiates a new V1alpha1ApplicationDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationDestinationWithDefaults() *V1alpha1ApplicationDestination {
	this := V1alpha1ApplicationDestination{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1alpha1ApplicationDestination) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationDestination) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1alpha1ApplicationDestination) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1alpha1ApplicationDestination) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1alpha1ApplicationDestination) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationDestination) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1alpha1ApplicationDestination) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1alpha1ApplicationDestination) SetNamespace(v string) {
	o.Namespace = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *V1alpha1ApplicationDestination) GetServer() string {
	if o == nil || o.Server == nil {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationDestination) GetServerOk() (*string, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *V1alpha1ApplicationDestination) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *V1alpha1ApplicationDestination) SetServer(v string) {
	o.Server = &v
}

func (o V1alpha1ApplicationDestination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationDestination struct {
	value *V1alpha1ApplicationDestination
	isSet bool
}

func (v NullableV1alpha1ApplicationDestination) Get() *V1alpha1ApplicationDestination {
	return v.value
}

func (v *NullableV1alpha1ApplicationDestination) Set(val *V1alpha1ApplicationDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationDestination(val *V1alpha1ApplicationDestination) *NullableV1alpha1ApplicationDestination {
	return &NullableV1alpha1ApplicationDestination{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
