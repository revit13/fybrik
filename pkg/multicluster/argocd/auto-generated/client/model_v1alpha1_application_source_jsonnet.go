/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationSourceJsonnet struct for V1alpha1ApplicationSourceJsonnet
type V1alpha1ApplicationSourceJsonnet struct {
	ExtVars *[]V1alpha1JsonnetVar `json:"extVars,omitempty"`
	Libs    *[]string             `json:"libs,omitempty"`
	Tlas    *[]V1alpha1JsonnetVar `json:"tlas,omitempty"`
}

// NewV1alpha1ApplicationSourceJsonnet instantiates a new V1alpha1ApplicationSourceJsonnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationSourceJsonnet() *V1alpha1ApplicationSourceJsonnet {
	this := V1alpha1ApplicationSourceJsonnet{}
	return &this
}

// NewV1alpha1ApplicationSourceJsonnetWithDefaults instantiates a new V1alpha1ApplicationSourceJsonnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationSourceJsonnetWithDefaults() *V1alpha1ApplicationSourceJsonnet {
	this := V1alpha1ApplicationSourceJsonnet{}
	return &this
}

// GetExtVars returns the ExtVars field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceJsonnet) GetExtVars() []V1alpha1JsonnetVar {
	if o == nil || o.ExtVars == nil {
		var ret []V1alpha1JsonnetVar
		return ret
	}
	return *o.ExtVars
}

// GetExtVarsOk returns a tuple with the ExtVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceJsonnet) GetExtVarsOk() (*[]V1alpha1JsonnetVar, bool) {
	if o == nil || o.ExtVars == nil {
		return nil, false
	}
	return o.ExtVars, true
}

// HasExtVars returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceJsonnet) HasExtVars() bool {
	if o != nil && o.ExtVars != nil {
		return true
	}

	return false
}

// SetExtVars gets a reference to the given []V1alpha1JsonnetVar and assigns it to the ExtVars field.
func (o *V1alpha1ApplicationSourceJsonnet) SetExtVars(v []V1alpha1JsonnetVar) {
	o.ExtVars = &v
}

// GetLibs returns the Libs field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceJsonnet) GetLibs() []string {
	if o == nil || o.Libs == nil {
		var ret []string
		return ret
	}
	return *o.Libs
}

// GetLibsOk returns a tuple with the Libs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceJsonnet) GetLibsOk() (*[]string, bool) {
	if o == nil || o.Libs == nil {
		return nil, false
	}
	return o.Libs, true
}

// HasLibs returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceJsonnet) HasLibs() bool {
	if o != nil && o.Libs != nil {
		return true
	}

	return false
}

// SetLibs gets a reference to the given []string and assigns it to the Libs field.
func (o *V1alpha1ApplicationSourceJsonnet) SetLibs(v []string) {
	o.Libs = &v
}

// GetTlas returns the Tlas field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSourceJsonnet) GetTlas() []V1alpha1JsonnetVar {
	if o == nil || o.Tlas == nil {
		var ret []V1alpha1JsonnetVar
		return ret
	}
	return *o.Tlas
}

// GetTlasOk returns a tuple with the Tlas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSourceJsonnet) GetTlasOk() (*[]V1alpha1JsonnetVar, bool) {
	if o == nil || o.Tlas == nil {
		return nil, false
	}
	return o.Tlas, true
}

// HasTlas returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSourceJsonnet) HasTlas() bool {
	if o != nil && o.Tlas != nil {
		return true
	}

	return false
}

// SetTlas gets a reference to the given []V1alpha1JsonnetVar and assigns it to the Tlas field.
func (o *V1alpha1ApplicationSourceJsonnet) SetTlas(v []V1alpha1JsonnetVar) {
	o.Tlas = &v
}

func (o V1alpha1ApplicationSourceJsonnet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExtVars != nil {
		toSerialize["extVars"] = o.ExtVars
	}
	if o.Libs != nil {
		toSerialize["libs"] = o.Libs
	}
	if o.Tlas != nil {
		toSerialize["tlas"] = o.Tlas
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationSourceJsonnet struct {
	value *V1alpha1ApplicationSourceJsonnet
	isSet bool
}

func (v NullableV1alpha1ApplicationSourceJsonnet) Get() *V1alpha1ApplicationSourceJsonnet {
	return v.value
}

func (v *NullableV1alpha1ApplicationSourceJsonnet) Set(val *V1alpha1ApplicationSourceJsonnet) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationSourceJsonnet) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationSourceJsonnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationSourceJsonnet(val *V1alpha1ApplicationSourceJsonnet) *NullableV1alpha1ApplicationSourceJsonnet {
	return &NullableV1alpha1ApplicationSourceJsonnet{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationSourceJsonnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationSourceJsonnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
