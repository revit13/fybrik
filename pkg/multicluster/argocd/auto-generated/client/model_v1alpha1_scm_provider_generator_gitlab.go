/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1SCMProviderGeneratorGitlab SCMProviderGeneratorGitlab defines connection info specific to Gitlab.
type V1alpha1SCMProviderGeneratorGitlab struct {
	// Scan all branches instead of just the default branch.
	AllBranches *bool `json:"allBranches,omitempty"`
	// The Gitlab API URL to talk to.
	Api *string `json:"api,omitempty"`
	// Gitlab group to scan. Required.  You can use either the project id (recommended) or the full namespaced path.
	Group            *string            `json:"group,omitempty"`
	IncludeSubgroups *bool              `json:"includeSubgroups,omitempty"`
	TokenRef         *V1alpha1SecretRef `json:"tokenRef,omitempty"`
}

// NewV1alpha1SCMProviderGeneratorGitlab instantiates a new V1alpha1SCMProviderGeneratorGitlab object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1SCMProviderGeneratorGitlab() *V1alpha1SCMProviderGeneratorGitlab {
	this := V1alpha1SCMProviderGeneratorGitlab{}
	return &this
}

// NewV1alpha1SCMProviderGeneratorGitlabWithDefaults instantiates a new V1alpha1SCMProviderGeneratorGitlab object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1SCMProviderGeneratorGitlabWithDefaults() *V1alpha1SCMProviderGeneratorGitlab {
	this := V1alpha1SCMProviderGeneratorGitlab{}
	return &this
}

// GetAllBranches returns the AllBranches field value if set, zero value otherwise.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetAllBranches() bool {
	if o == nil || o.AllBranches == nil {
		var ret bool
		return ret
	}
	return *o.AllBranches
}

// GetAllBranchesOk returns a tuple with the AllBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetAllBranchesOk() (*bool, bool) {
	if o == nil || o.AllBranches == nil {
		return nil, false
	}
	return o.AllBranches, true
}

// HasAllBranches returns a boolean if a field has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) HasAllBranches() bool {
	if o != nil && o.AllBranches != nil {
		return true
	}

	return false
}

// SetAllBranches gets a reference to the given bool and assigns it to the AllBranches field.
func (o *V1alpha1SCMProviderGeneratorGitlab) SetAllBranches(v bool) {
	o.AllBranches = &v
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetApi() string {
	if o == nil || o.Api == nil {
		var ret string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetApiOk() (*string, bool) {
	if o == nil || o.Api == nil {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) HasApi() bool {
	if o != nil && o.Api != nil {
		return true
	}

	return false
}

// SetApi gets a reference to the given string and assigns it to the Api field.
func (o *V1alpha1SCMProviderGeneratorGitlab) SetApi(v string) {
	o.Api = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1alpha1SCMProviderGeneratorGitlab) SetGroup(v string) {
	o.Group = &v
}

// GetIncludeSubgroups returns the IncludeSubgroups field value if set, zero value otherwise.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetIncludeSubgroups() bool {
	if o == nil || o.IncludeSubgroups == nil {
		var ret bool
		return ret
	}
	return *o.IncludeSubgroups
}

// GetIncludeSubgroupsOk returns a tuple with the IncludeSubgroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetIncludeSubgroupsOk() (*bool, bool) {
	if o == nil || o.IncludeSubgroups == nil {
		return nil, false
	}
	return o.IncludeSubgroups, true
}

// HasIncludeSubgroups returns a boolean if a field has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) HasIncludeSubgroups() bool {
	if o != nil && o.IncludeSubgroups != nil {
		return true
	}

	return false
}

// SetIncludeSubgroups gets a reference to the given bool and assigns it to the IncludeSubgroups field.
func (o *V1alpha1SCMProviderGeneratorGitlab) SetIncludeSubgroups(v bool) {
	o.IncludeSubgroups = &v
}

// GetTokenRef returns the TokenRef field value if set, zero value otherwise.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetTokenRef() V1alpha1SecretRef {
	if o == nil || o.TokenRef == nil {
		var ret V1alpha1SecretRef
		return ret
	}
	return *o.TokenRef
}

// GetTokenRefOk returns a tuple with the TokenRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) GetTokenRefOk() (*V1alpha1SecretRef, bool) {
	if o == nil || o.TokenRef == nil {
		return nil, false
	}
	return o.TokenRef, true
}

// HasTokenRef returns a boolean if a field has been set.
func (o *V1alpha1SCMProviderGeneratorGitlab) HasTokenRef() bool {
	if o != nil && o.TokenRef != nil {
		return true
	}

	return false
}

// SetTokenRef gets a reference to the given V1alpha1SecretRef and assigns it to the TokenRef field.
func (o *V1alpha1SCMProviderGeneratorGitlab) SetTokenRef(v V1alpha1SecretRef) {
	o.TokenRef = &v
}

func (o V1alpha1SCMProviderGeneratorGitlab) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllBranches != nil {
		toSerialize["allBranches"] = o.AllBranches
	}
	if o.Api != nil {
		toSerialize["api"] = o.Api
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.IncludeSubgroups != nil {
		toSerialize["includeSubgroups"] = o.IncludeSubgroups
	}
	if o.TokenRef != nil {
		toSerialize["tokenRef"] = o.TokenRef
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1SCMProviderGeneratorGitlab struct {
	value *V1alpha1SCMProviderGeneratorGitlab
	isSet bool
}

func (v NullableV1alpha1SCMProviderGeneratorGitlab) Get() *V1alpha1SCMProviderGeneratorGitlab {
	return v.value
}

func (v *NullableV1alpha1SCMProviderGeneratorGitlab) Set(val *V1alpha1SCMProviderGeneratorGitlab) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1SCMProviderGeneratorGitlab) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1SCMProviderGeneratorGitlab) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1SCMProviderGeneratorGitlab(val *V1alpha1SCMProviderGeneratorGitlab) *NullableV1alpha1SCMProviderGeneratorGitlab {
	return &NullableV1alpha1SCMProviderGeneratorGitlab{value: val, isSet: true}
}

func (v NullableV1alpha1SCMProviderGeneratorGitlab) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1SCMProviderGeneratorGitlab) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
