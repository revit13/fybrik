name: Build

on:
  push:
    branches-ignore:
      - 'site'
    tags:
      - '*'
  pull_request:
    branches:
      - master

env:
  GO_VERSION: 1.16
  JAVA_VERSION: 11

jobs:

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
    steps:
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - uses: actions/checkout@v2
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          ~/go/pkg/mod
          ${{ github.workspace }}/hack/tools/bin
        key: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-m2-${{ hashFiles('**/pom.xml') }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-t-${{ hashFiles('hack/make-rules/tools.mk') }}-go
    - name: Install tools
      run: make install-tools
    - name: Integration tests
      run: make run-integration-tests
    - run: docker images
    - name: Save images
      if: ${{ github.event_name != 'pull_request' }}
      run: make save-images
    - name: Upload images
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-artifact@v2
      with:
        name: images
        path: images.tar
        retention-days: 1

  push_images:
    name: Push images
    runs-on: ubuntu-latest
    env:
      DOCKER_HOSTNAME: "localhost:5000"
      DOCKER_NAMESPACE: fybrik-system
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
    needs: [integration-tests]
    if: ${{ github.event_name != 'pull_request' }}
    steps:
    - uses: actions/checkout@v2
    - name: Download artifact
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/download-artifact@v2
      with:
        name: images
    - name: Load images
      if: ${{ github.event_name != 'pull_request' }}
      run: docker load -i images.tar
    - run: docker images
    # Versions are created as follows:
    # tags starting with v will be released as what comes after `v`. (e.g. refs/tags/v1.0 -> 1.0) (as well as 'latest' tag)
    # release branches in e.g. (refs/heads/releases/1.0 -> 1.0-rc )
    # other branches (e.g. master) will be released with branch name as version
    - id: version
      name: Infer version
      run: |
        version="${GITHUB_REF#refs/tags/v}"
        echo "HELM_PUBLIC_TAGNAME=${version}" >> $GITHUB_ENV
        push_tag_event='true'
        if  [[ $version == refs/* ]] ;
        then
            push_tag_event='false'
            branch="${GITHUB_REF#refs/heads/}"
            version=$branch
            echo "HELM_PUBLIC_TAGNAME=0.0.0-${version}" >> $GITHUB_ENV
        fi
        if [[ $version == releases/* ]] ;
        then
           releaseVersion="${GITHUB_REF#refs/heads/releases/}"
           version="$releaseVersion-rc"
           echo "HELM_PUBLIC_TAGNAME=$releaseVersion-rc" >> $GITHUB_ENV
        fi
        echo ::set-output name=version::$version
        echo ::set-output name=push_tag_event::$push_tag_event
    - name: Publish images
      if: ${{ github.event_name != 'pull_request' }}
      env:
        DOCKER_PUBLIC_TAGNAME:  ${{ steps.version.outputs.version }}
      run: make docker-retag-and-push-public && make helm-push-public
    - name: Publish latest image tag on push tag event
      if: github.event_name != 'pull_request' && steps.version.outputs.push_tag_event == 'true'
      env:
        DOCKER_PUBLIC_TAGNAME: 'latest'
        HELM_PUBLIC_TAGNAME: '0.0.0-latest'
      run: make docker-retag-and-push-public && make helm-push-public
