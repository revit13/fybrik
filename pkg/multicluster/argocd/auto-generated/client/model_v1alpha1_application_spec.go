/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationSpec ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
type V1alpha1ApplicationSpec struct {
	Destination *V1alpha1ApplicationDestination `json:"destination,omitempty"`
	IgnoreDifferences *[]V1alpha1ResourceIgnoreDifferences `json:"ignoreDifferences,omitempty"`
	Info *[]V1alpha1Info `json:"info,omitempty"`
	// Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
	Project *string `json:"project,omitempty"`
	// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
	RevisionHistoryLimit *string `json:"revisionHistoryLimit,omitempty"`
	Source *V1alpha1ApplicationSource `json:"source,omitempty"`
	Sources *[]V1alpha1ApplicationSource `json:"sources,omitempty"`
	SyncPolicy *V1alpha1SyncPolicy `json:"syncPolicy,omitempty"`
}

// NewV1alpha1ApplicationSpec instantiates a new V1alpha1ApplicationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationSpec() *V1alpha1ApplicationSpec {
	this := V1alpha1ApplicationSpec{}
	return &this
}

// NewV1alpha1ApplicationSpecWithDefaults instantiates a new V1alpha1ApplicationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationSpecWithDefaults() *V1alpha1ApplicationSpec {
	this := V1alpha1ApplicationSpec{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetDestination() V1alpha1ApplicationDestination {
	if o == nil || o.Destination == nil {
		var ret V1alpha1ApplicationDestination
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetDestinationOk() (*V1alpha1ApplicationDestination, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given V1alpha1ApplicationDestination and assigns it to the Destination field.
func (o *V1alpha1ApplicationSpec) SetDestination(v V1alpha1ApplicationDestination) {
	o.Destination = &v
}

// GetIgnoreDifferences returns the IgnoreDifferences field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetIgnoreDifferences() []V1alpha1ResourceIgnoreDifferences {
	if o == nil || o.IgnoreDifferences == nil {
		var ret []V1alpha1ResourceIgnoreDifferences
		return ret
	}
	return *o.IgnoreDifferences
}

// GetIgnoreDifferencesOk returns a tuple with the IgnoreDifferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetIgnoreDifferencesOk() (*[]V1alpha1ResourceIgnoreDifferences, bool) {
	if o == nil || o.IgnoreDifferences == nil {
		return nil, false
	}
	return o.IgnoreDifferences, true
}

// HasIgnoreDifferences returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasIgnoreDifferences() bool {
	if o != nil && o.IgnoreDifferences != nil {
		return true
	}

	return false
}

// SetIgnoreDifferences gets a reference to the given []V1alpha1ResourceIgnoreDifferences and assigns it to the IgnoreDifferences field.
func (o *V1alpha1ApplicationSpec) SetIgnoreDifferences(v []V1alpha1ResourceIgnoreDifferences) {
	o.IgnoreDifferences = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetInfo() []V1alpha1Info {
	if o == nil || o.Info == nil {
		var ret []V1alpha1Info
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetInfoOk() (*[]V1alpha1Info, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given []V1alpha1Info and assigns it to the Info field.
func (o *V1alpha1ApplicationSpec) SetInfo(v []V1alpha1Info) {
	o.Info = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *V1alpha1ApplicationSpec) SetProject(v string) {
	o.Project = &v
}

// GetRevisionHistoryLimit returns the RevisionHistoryLimit field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetRevisionHistoryLimit() string {
	if o == nil || o.RevisionHistoryLimit == nil {
		var ret string
		return ret
	}
	return *o.RevisionHistoryLimit
}

// GetRevisionHistoryLimitOk returns a tuple with the RevisionHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetRevisionHistoryLimitOk() (*string, bool) {
	if o == nil || o.RevisionHistoryLimit == nil {
		return nil, false
	}
	return o.RevisionHistoryLimit, true
}

// HasRevisionHistoryLimit returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasRevisionHistoryLimit() bool {
	if o != nil && o.RevisionHistoryLimit != nil {
		return true
	}

	return false
}

// SetRevisionHistoryLimit gets a reference to the given string and assigns it to the RevisionHistoryLimit field.
func (o *V1alpha1ApplicationSpec) SetRevisionHistoryLimit(v string) {
	o.RevisionHistoryLimit = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetSource() V1alpha1ApplicationSource {
	if o == nil || o.Source == nil {
		var ret V1alpha1ApplicationSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetSourceOk() (*V1alpha1ApplicationSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given V1alpha1ApplicationSource and assigns it to the Source field.
func (o *V1alpha1ApplicationSpec) SetSource(v V1alpha1ApplicationSource) {
	o.Source = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetSources() []V1alpha1ApplicationSource {
	if o == nil || o.Sources == nil {
		var ret []V1alpha1ApplicationSource
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetSourcesOk() (*[]V1alpha1ApplicationSource, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []V1alpha1ApplicationSource and assigns it to the Sources field.
func (o *V1alpha1ApplicationSpec) SetSources(v []V1alpha1ApplicationSource) {
	o.Sources = &v
}

// GetSyncPolicy returns the SyncPolicy field value if set, zero value otherwise.
func (o *V1alpha1ApplicationSpec) GetSyncPolicy() V1alpha1SyncPolicy {
	if o == nil || o.SyncPolicy == nil {
		var ret V1alpha1SyncPolicy
		return ret
	}
	return *o.SyncPolicy
}

// GetSyncPolicyOk returns a tuple with the SyncPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationSpec) GetSyncPolicyOk() (*V1alpha1SyncPolicy, bool) {
	if o == nil || o.SyncPolicy == nil {
		return nil, false
	}
	return o.SyncPolicy, true
}

// HasSyncPolicy returns a boolean if a field has been set.
func (o *V1alpha1ApplicationSpec) HasSyncPolicy() bool {
	if o != nil && o.SyncPolicy != nil {
		return true
	}

	return false
}

// SetSyncPolicy gets a reference to the given V1alpha1SyncPolicy and assigns it to the SyncPolicy field.
func (o *V1alpha1ApplicationSpec) SetSyncPolicy(v V1alpha1SyncPolicy) {
	o.SyncPolicy = &v
}

func (o V1alpha1ApplicationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.IgnoreDifferences != nil {
		toSerialize["ignoreDifferences"] = o.IgnoreDifferences
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.RevisionHistoryLimit != nil {
		toSerialize["revisionHistoryLimit"] = o.RevisionHistoryLimit
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.SyncPolicy != nil {
		toSerialize["syncPolicy"] = o.SyncPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationSpec struct {
	value *V1alpha1ApplicationSpec
	isSet bool
}

func (v NullableV1alpha1ApplicationSpec) Get() *V1alpha1ApplicationSpec {
	return v.value
}

func (v *NullableV1alpha1ApplicationSpec) Set(val *V1alpha1ApplicationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationSpec(val *V1alpha1ApplicationSpec) *NullableV1alpha1ApplicationSpec {
	return &NullableV1alpha1ApplicationSpec{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


