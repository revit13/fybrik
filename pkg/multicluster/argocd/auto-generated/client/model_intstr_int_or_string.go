/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// IntstrIntOrString +protobuf=true +protobuf.options.(gogoproto.goproto_stringer)=false +k8s:openapi-gen=true
type IntstrIntOrString struct {
	IntVal *int32 `json:"intVal,omitempty"`
	StrVal *string `json:"strVal,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewIntstrIntOrString instantiates a new IntstrIntOrString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntstrIntOrString() *IntstrIntOrString {
	this := IntstrIntOrString{}
	return &this
}

// NewIntstrIntOrStringWithDefaults instantiates a new IntstrIntOrString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntstrIntOrStringWithDefaults() *IntstrIntOrString {
	this := IntstrIntOrString{}
	return &this
}

// GetIntVal returns the IntVal field value if set, zero value otherwise.
func (o *IntstrIntOrString) GetIntVal() int32 {
	if o == nil || o.IntVal == nil {
		var ret int32
		return ret
	}
	return *o.IntVal
}

// GetIntValOk returns a tuple with the IntVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntstrIntOrString) GetIntValOk() (*int32, bool) {
	if o == nil || o.IntVal == nil {
		return nil, false
	}
	return o.IntVal, true
}

// HasIntVal returns a boolean if a field has been set.
func (o *IntstrIntOrString) HasIntVal() bool {
	if o != nil && o.IntVal != nil {
		return true
	}

	return false
}

// SetIntVal gets a reference to the given int32 and assigns it to the IntVal field.
func (o *IntstrIntOrString) SetIntVal(v int32) {
	o.IntVal = &v
}

// GetStrVal returns the StrVal field value if set, zero value otherwise.
func (o *IntstrIntOrString) GetStrVal() string {
	if o == nil || o.StrVal == nil {
		var ret string
		return ret
	}
	return *o.StrVal
}

// GetStrValOk returns a tuple with the StrVal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntstrIntOrString) GetStrValOk() (*string, bool) {
	if o == nil || o.StrVal == nil {
		return nil, false
	}
	return o.StrVal, true
}

// HasStrVal returns a boolean if a field has been set.
func (o *IntstrIntOrString) HasStrVal() bool {
	if o != nil && o.StrVal != nil {
		return true
	}

	return false
}

// SetStrVal gets a reference to the given string and assigns it to the StrVal field.
func (o *IntstrIntOrString) SetStrVal(v string) {
	o.StrVal = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IntstrIntOrString) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntstrIntOrString) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IntstrIntOrString) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IntstrIntOrString) SetType(v string) {
	o.Type = &v
}

func (o IntstrIntOrString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IntVal != nil {
		toSerialize["intVal"] = o.IntVal
	}
	if o.StrVal != nil {
		toSerialize["strVal"] = o.StrVal
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableIntstrIntOrString struct {
	value *IntstrIntOrString
	isSet bool
}

func (v NullableIntstrIntOrString) Get() *IntstrIntOrString {
	return v.value
}

func (v *NullableIntstrIntOrString) Set(val *IntstrIntOrString) {
	v.value = val
	v.isSet = true
}

func (v NullableIntstrIntOrString) IsSet() bool {
	return v.isSet
}

func (v *NullableIntstrIntOrString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntstrIntOrString(val *IntstrIntOrString) *NullableIntstrIntOrString {
	return &NullableIntstrIntOrString{value: val, isSet: true}
}

func (v NullableIntstrIntOrString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntstrIntOrString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


