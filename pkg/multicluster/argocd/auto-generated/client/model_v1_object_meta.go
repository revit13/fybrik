/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1ObjectMeta ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type V1ObjectMeta struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	// Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.  The name in the go struct is changed to help clients detect accidental use.  +optional
	ClusterName *string `json:"clusterName,omitempty"`
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
	DeletionGracePeriodSeconds *string `json:"deletionGracePeriodSeconds,omitempty"`
	DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`
	Finalizers *[]string `json:"finalizers,omitempty"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional
	GenerateName *string `json:"generateName,omitempty"`
	Generation *int32 `json:"generation,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  +optional
	ManagedFields *[]V1ManagedFieldsEntry `json:"managedFields,omitempty"`
	Name *string `json:"name,omitempty"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional
	Namespace *string `json:"namespace,omitempty"`
	OwnerReferences *[]V1OwnerReference `json:"ownerReferences,omitempty"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional
	ResourceVersion *string `json:"resourceVersion,omitempty"`
	SelfLink *string `json:"selfLink,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids +optional
	Uid *string `json:"uid,omitempty"`
}

// NewV1ObjectMeta instantiates a new V1ObjectMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ObjectMeta() *V1ObjectMeta {
	this := V1ObjectMeta{}
	return &this
}

// NewV1ObjectMetaWithDefaults instantiates a new V1ObjectMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ObjectMetaWithDefaults() *V1ObjectMeta {
	this := V1ObjectMeta{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *V1ObjectMeta) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *V1ObjectMeta) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetCreationTimestamp() string {
	if o == nil || o.CreationTimestamp == nil {
		var ret string
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetCreationTimestampOk() (*string, bool) {
	if o == nil || o.CreationTimestamp == nil {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp != nil {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given string and assigns it to the CreationTimestamp field.
func (o *V1ObjectMeta) SetCreationTimestamp(v string) {
	o.CreationTimestamp = &v
}

// GetDeletionGracePeriodSeconds returns the DeletionGracePeriodSeconds field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetDeletionGracePeriodSeconds() string {
	if o == nil || o.DeletionGracePeriodSeconds == nil {
		var ret string
		return ret
	}
	return *o.DeletionGracePeriodSeconds
}

// GetDeletionGracePeriodSecondsOk returns a tuple with the DeletionGracePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetDeletionGracePeriodSecondsOk() (*string, bool) {
	if o == nil || o.DeletionGracePeriodSeconds == nil {
		return nil, false
	}
	return o.DeletionGracePeriodSeconds, true
}

// HasDeletionGracePeriodSeconds returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasDeletionGracePeriodSeconds() bool {
	if o != nil && o.DeletionGracePeriodSeconds != nil {
		return true
	}

	return false
}

// SetDeletionGracePeriodSeconds gets a reference to the given string and assigns it to the DeletionGracePeriodSeconds field.
func (o *V1ObjectMeta) SetDeletionGracePeriodSeconds(v string) {
	o.DeletionGracePeriodSeconds = &v
}

// GetDeletionTimestamp returns the DeletionTimestamp field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetDeletionTimestamp() string {
	if o == nil || o.DeletionTimestamp == nil {
		var ret string
		return ret
	}
	return *o.DeletionTimestamp
}

// GetDeletionTimestampOk returns a tuple with the DeletionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetDeletionTimestampOk() (*string, bool) {
	if o == nil || o.DeletionTimestamp == nil {
		return nil, false
	}
	return o.DeletionTimestamp, true
}

// HasDeletionTimestamp returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasDeletionTimestamp() bool {
	if o != nil && o.DeletionTimestamp != nil {
		return true
	}

	return false
}

// SetDeletionTimestamp gets a reference to the given string and assigns it to the DeletionTimestamp field.
func (o *V1ObjectMeta) SetDeletionTimestamp(v string) {
	o.DeletionTimestamp = &v
}

// GetFinalizers returns the Finalizers field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetFinalizers() []string {
	if o == nil || o.Finalizers == nil {
		var ret []string
		return ret
	}
	return *o.Finalizers
}

// GetFinalizersOk returns a tuple with the Finalizers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetFinalizersOk() (*[]string, bool) {
	if o == nil || o.Finalizers == nil {
		return nil, false
	}
	return o.Finalizers, true
}

// HasFinalizers returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasFinalizers() bool {
	if o != nil && o.Finalizers != nil {
		return true
	}

	return false
}

// SetFinalizers gets a reference to the given []string and assigns it to the Finalizers field.
func (o *V1ObjectMeta) SetFinalizers(v []string) {
	o.Finalizers = &v
}

// GetGenerateName returns the GenerateName field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetGenerateName() string {
	if o == nil || o.GenerateName == nil {
		var ret string
		return ret
	}
	return *o.GenerateName
}

// GetGenerateNameOk returns a tuple with the GenerateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetGenerateNameOk() (*string, bool) {
	if o == nil || o.GenerateName == nil {
		return nil, false
	}
	return o.GenerateName, true
}

// HasGenerateName returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasGenerateName() bool {
	if o != nil && o.GenerateName != nil {
		return true
	}

	return false
}

// SetGenerateName gets a reference to the given string and assigns it to the GenerateName field.
func (o *V1ObjectMeta) SetGenerateName(v string) {
	o.GenerateName = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetGeneration() int32 {
	if o == nil || o.Generation == nil {
		var ret int32
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetGenerationOk() (*int32, bool) {
	if o == nil || o.Generation == nil {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasGeneration() bool {
	if o != nil && o.Generation != nil {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given int32 and assigns it to the Generation field.
func (o *V1ObjectMeta) SetGeneration(v int32) {
	o.Generation = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *V1ObjectMeta) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetManagedFields returns the ManagedFields field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetManagedFields() []V1ManagedFieldsEntry {
	if o == nil || o.ManagedFields == nil {
		var ret []V1ManagedFieldsEntry
		return ret
	}
	return *o.ManagedFields
}

// GetManagedFieldsOk returns a tuple with the ManagedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetManagedFieldsOk() (*[]V1ManagedFieldsEntry, bool) {
	if o == nil || o.ManagedFields == nil {
		return nil, false
	}
	return o.ManagedFields, true
}

// HasManagedFields returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasManagedFields() bool {
	if o != nil && o.ManagedFields != nil {
		return true
	}

	return false
}

// SetManagedFields gets a reference to the given []V1ManagedFieldsEntry and assigns it to the ManagedFields field.
func (o *V1ObjectMeta) SetManagedFields(v []V1ManagedFieldsEntry) {
	o.ManagedFields = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ObjectMeta) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1ObjectMeta) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOwnerReferences returns the OwnerReferences field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetOwnerReferences() []V1OwnerReference {
	if o == nil || o.OwnerReferences == nil {
		var ret []V1OwnerReference
		return ret
	}
	return *o.OwnerReferences
}

// GetOwnerReferencesOk returns a tuple with the OwnerReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetOwnerReferencesOk() (*[]V1OwnerReference, bool) {
	if o == nil || o.OwnerReferences == nil {
		return nil, false
	}
	return o.OwnerReferences, true
}

// HasOwnerReferences returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasOwnerReferences() bool {
	if o != nil && o.OwnerReferences != nil {
		return true
	}

	return false
}

// SetOwnerReferences gets a reference to the given []V1OwnerReference and assigns it to the OwnerReferences field.
func (o *V1ObjectMeta) SetOwnerReferences(v []V1OwnerReference) {
	o.OwnerReferences = &v
}

// GetResourceVersion returns the ResourceVersion field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetResourceVersion() string {
	if o == nil || o.ResourceVersion == nil {
		var ret string
		return ret
	}
	return *o.ResourceVersion
}

// GetResourceVersionOk returns a tuple with the ResourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetResourceVersionOk() (*string, bool) {
	if o == nil || o.ResourceVersion == nil {
		return nil, false
	}
	return o.ResourceVersion, true
}

// HasResourceVersion returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasResourceVersion() bool {
	if o != nil && o.ResourceVersion != nil {
		return true
	}

	return false
}

// SetResourceVersion gets a reference to the given string and assigns it to the ResourceVersion field.
func (o *V1ObjectMeta) SetResourceVersion(v string) {
	o.ResourceVersion = &v
}

// GetSelfLink returns the SelfLink field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetSelfLink() string {
	if o == nil || o.SelfLink == nil {
		var ret string
		return ret
	}
	return *o.SelfLink
}

// GetSelfLinkOk returns a tuple with the SelfLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetSelfLinkOk() (*string, bool) {
	if o == nil || o.SelfLink == nil {
		return nil, false
	}
	return o.SelfLink, true
}

// HasSelfLink returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasSelfLink() bool {
	if o != nil && o.SelfLink != nil {
		return true
	}

	return false
}

// SetSelfLink gets a reference to the given string and assigns it to the SelfLink field.
func (o *V1ObjectMeta) SetSelfLink(v string) {
	o.SelfLink = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *V1ObjectMeta) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObjectMeta) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *V1ObjectMeta) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *V1ObjectMeta) SetUid(v string) {
	o.Uid = &v
}

func (o V1ObjectMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.ClusterName != nil {
		toSerialize["clusterName"] = o.ClusterName
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if o.DeletionGracePeriodSeconds != nil {
		toSerialize["deletionGracePeriodSeconds"] = o.DeletionGracePeriodSeconds
	}
	if o.DeletionTimestamp != nil {
		toSerialize["deletionTimestamp"] = o.DeletionTimestamp
	}
	if o.Finalizers != nil {
		toSerialize["finalizers"] = o.Finalizers
	}
	if o.GenerateName != nil {
		toSerialize["generateName"] = o.GenerateName
	}
	if o.Generation != nil {
		toSerialize["generation"] = o.Generation
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.ManagedFields != nil {
		toSerialize["managedFields"] = o.ManagedFields
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.OwnerReferences != nil {
		toSerialize["ownerReferences"] = o.OwnerReferences
	}
	if o.ResourceVersion != nil {
		toSerialize["resourceVersion"] = o.ResourceVersion
	}
	if o.SelfLink != nil {
		toSerialize["selfLink"] = o.SelfLink
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableV1ObjectMeta struct {
	value *V1ObjectMeta
	isSet bool
}

func (v NullableV1ObjectMeta) Get() *V1ObjectMeta {
	return v.value
}

func (v *NullableV1ObjectMeta) Set(val *V1ObjectMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObjectMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObjectMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObjectMeta(val *V1ObjectMeta) *NullableV1ObjectMeta {
	return &NullableV1ObjectMeta{value: val, isSet: true}
}

func (v NullableV1ObjectMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObjectMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


