/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1PullRequestGeneratorGitLab PullRequestGeneratorGitLab defines connection info specific to GitLab.
type V1alpha1PullRequestGeneratorGitLab struct {
	// The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
	Api *string `json:"api,omitempty"`
	Labels *[]string `json:"labels,omitempty"`
	// GitLab project to scan. Required.
	Project *string `json:"project,omitempty"`
	PullRequestState *string `json:"pullRequestState,omitempty"`
	TokenRef *V1alpha1SecretRef `json:"tokenRef,omitempty"`
}

// NewV1alpha1PullRequestGeneratorGitLab instantiates a new V1alpha1PullRequestGeneratorGitLab object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1PullRequestGeneratorGitLab() *V1alpha1PullRequestGeneratorGitLab {
	this := V1alpha1PullRequestGeneratorGitLab{}
	return &this
}

// NewV1alpha1PullRequestGeneratorGitLabWithDefaults instantiates a new V1alpha1PullRequestGeneratorGitLab object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1PullRequestGeneratorGitLabWithDefaults() *V1alpha1PullRequestGeneratorGitLab {
	this := V1alpha1PullRequestGeneratorGitLab{}
	return &this
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *V1alpha1PullRequestGeneratorGitLab) GetApi() string {
	if o == nil || o.Api == nil {
		var ret string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) GetApiOk() (*string, bool) {
	if o == nil || o.Api == nil {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) HasApi() bool {
	if o != nil && o.Api != nil {
		return true
	}

	return false
}

// SetApi gets a reference to the given string and assigns it to the Api field.
func (o *V1alpha1PullRequestGeneratorGitLab) SetApi(v string) {
	o.Api = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1alpha1PullRequestGeneratorGitLab) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *V1alpha1PullRequestGeneratorGitLab) SetLabels(v []string) {
	o.Labels = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *V1alpha1PullRequestGeneratorGitLab) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *V1alpha1PullRequestGeneratorGitLab) SetProject(v string) {
	o.Project = &v
}

// GetPullRequestState returns the PullRequestState field value if set, zero value otherwise.
func (o *V1alpha1PullRequestGeneratorGitLab) GetPullRequestState() string {
	if o == nil || o.PullRequestState == nil {
		var ret string
		return ret
	}
	return *o.PullRequestState
}

// GetPullRequestStateOk returns a tuple with the PullRequestState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) GetPullRequestStateOk() (*string, bool) {
	if o == nil || o.PullRequestState == nil {
		return nil, false
	}
	return o.PullRequestState, true
}

// HasPullRequestState returns a boolean if a field has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) HasPullRequestState() bool {
	if o != nil && o.PullRequestState != nil {
		return true
	}

	return false
}

// SetPullRequestState gets a reference to the given string and assigns it to the PullRequestState field.
func (o *V1alpha1PullRequestGeneratorGitLab) SetPullRequestState(v string) {
	o.PullRequestState = &v
}

// GetTokenRef returns the TokenRef field value if set, zero value otherwise.
func (o *V1alpha1PullRequestGeneratorGitLab) GetTokenRef() V1alpha1SecretRef {
	if o == nil || o.TokenRef == nil {
		var ret V1alpha1SecretRef
		return ret
	}
	return *o.TokenRef
}

// GetTokenRefOk returns a tuple with the TokenRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) GetTokenRefOk() (*V1alpha1SecretRef, bool) {
	if o == nil || o.TokenRef == nil {
		return nil, false
	}
	return o.TokenRef, true
}

// HasTokenRef returns a boolean if a field has been set.
func (o *V1alpha1PullRequestGeneratorGitLab) HasTokenRef() bool {
	if o != nil && o.TokenRef != nil {
		return true
	}

	return false
}

// SetTokenRef gets a reference to the given V1alpha1SecretRef and assigns it to the TokenRef field.
func (o *V1alpha1PullRequestGeneratorGitLab) SetTokenRef(v V1alpha1SecretRef) {
	o.TokenRef = &v
}

func (o V1alpha1PullRequestGeneratorGitLab) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Api != nil {
		toSerialize["api"] = o.Api
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.PullRequestState != nil {
		toSerialize["pullRequestState"] = o.PullRequestState
	}
	if o.TokenRef != nil {
		toSerialize["tokenRef"] = o.TokenRef
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1PullRequestGeneratorGitLab struct {
	value *V1alpha1PullRequestGeneratorGitLab
	isSet bool
}

func (v NullableV1alpha1PullRequestGeneratorGitLab) Get() *V1alpha1PullRequestGeneratorGitLab {
	return v.value
}

func (v *NullableV1alpha1PullRequestGeneratorGitLab) Set(val *V1alpha1PullRequestGeneratorGitLab) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1PullRequestGeneratorGitLab) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1PullRequestGeneratorGitLab) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1PullRequestGeneratorGitLab(val *V1alpha1PullRequestGeneratorGitLab) *NullableV1alpha1PullRequestGeneratorGitLab {
	return &NullableV1alpha1PullRequestGeneratorGitLab{value: val, isSet: true}
}

func (v NullableV1alpha1PullRequestGeneratorGitLab) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1PullRequestGeneratorGitLab) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


