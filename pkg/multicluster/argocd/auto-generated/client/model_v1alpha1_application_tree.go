/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationTree struct for V1alpha1ApplicationTree
type V1alpha1ApplicationTree struct {
	Hosts *[]V1alpha1HostInfo `json:"hosts,omitempty"`
	// Nodes contains list of nodes which either directly managed by the application and children of directly managed nodes.
	Nodes *[]V1alpha1ResourceNode `json:"nodes,omitempty"`
	// OrphanedNodes contains if or orphaned nodes: nodes which are not managed by the app but in the same namespace. List is populated only if orphaned resources enabled in app project.
	OrphanedNodes *[]V1alpha1ResourceNode `json:"orphanedNodes,omitempty"`
}

// NewV1alpha1ApplicationTree instantiates a new V1alpha1ApplicationTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationTree() *V1alpha1ApplicationTree {
	this := V1alpha1ApplicationTree{}
	return &this
}

// NewV1alpha1ApplicationTreeWithDefaults instantiates a new V1alpha1ApplicationTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationTreeWithDefaults() *V1alpha1ApplicationTree {
	this := V1alpha1ApplicationTree{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *V1alpha1ApplicationTree) GetHosts() []V1alpha1HostInfo {
	if o == nil || o.Hosts == nil {
		var ret []V1alpha1HostInfo
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationTree) GetHostsOk() (*[]V1alpha1HostInfo, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *V1alpha1ApplicationTree) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []V1alpha1HostInfo and assigns it to the Hosts field.
func (o *V1alpha1ApplicationTree) SetHosts(v []V1alpha1HostInfo) {
	o.Hosts = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V1alpha1ApplicationTree) GetNodes() []V1alpha1ResourceNode {
	if o == nil || o.Nodes == nil {
		var ret []V1alpha1ResourceNode
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationTree) GetNodesOk() (*[]V1alpha1ResourceNode, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V1alpha1ApplicationTree) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []V1alpha1ResourceNode and assigns it to the Nodes field.
func (o *V1alpha1ApplicationTree) SetNodes(v []V1alpha1ResourceNode) {
	o.Nodes = &v
}

// GetOrphanedNodes returns the OrphanedNodes field value if set, zero value otherwise.
func (o *V1alpha1ApplicationTree) GetOrphanedNodes() []V1alpha1ResourceNode {
	if o == nil || o.OrphanedNodes == nil {
		var ret []V1alpha1ResourceNode
		return ret
	}
	return *o.OrphanedNodes
}

// GetOrphanedNodesOk returns a tuple with the OrphanedNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationTree) GetOrphanedNodesOk() (*[]V1alpha1ResourceNode, bool) {
	if o == nil || o.OrphanedNodes == nil {
		return nil, false
	}
	return o.OrphanedNodes, true
}

// HasOrphanedNodes returns a boolean if a field has been set.
func (o *V1alpha1ApplicationTree) HasOrphanedNodes() bool {
	if o != nil && o.OrphanedNodes != nil {
		return true
	}

	return false
}

// SetOrphanedNodes gets a reference to the given []V1alpha1ResourceNode and assigns it to the OrphanedNodes field.
func (o *V1alpha1ApplicationTree) SetOrphanedNodes(v []V1alpha1ResourceNode) {
	o.OrphanedNodes = &v
}

func (o V1alpha1ApplicationTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.OrphanedNodes != nil {
		toSerialize["orphanedNodes"] = o.OrphanedNodes
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationTree struct {
	value *V1alpha1ApplicationTree
	isSet bool
}

func (v NullableV1alpha1ApplicationTree) Get() *V1alpha1ApplicationTree {
	return v.value
}

func (v *NullableV1alpha1ApplicationTree) Set(val *V1alpha1ApplicationTree) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationTree) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationTree(val *V1alpha1ApplicationTree) *NullableV1alpha1ApplicationTree {
	return &NullableV1alpha1ApplicationTree{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


