/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// V1alpha1ApplicationMatchExpression struct for V1alpha1ApplicationMatchExpression
type V1alpha1ApplicationMatchExpression struct {
	Key *string `json:"key,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// NewV1alpha1ApplicationMatchExpression instantiates a new V1alpha1ApplicationMatchExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1ApplicationMatchExpression() *V1alpha1ApplicationMatchExpression {
	this := V1alpha1ApplicationMatchExpression{}
	return &this
}

// NewV1alpha1ApplicationMatchExpressionWithDefaults instantiates a new V1alpha1ApplicationMatchExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1ApplicationMatchExpressionWithDefaults() *V1alpha1ApplicationMatchExpression {
	this := V1alpha1ApplicationMatchExpression{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *V1alpha1ApplicationMatchExpression) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationMatchExpression) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *V1alpha1ApplicationMatchExpression) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *V1alpha1ApplicationMatchExpression) SetKey(v string) {
	o.Key = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *V1alpha1ApplicationMatchExpression) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationMatchExpression) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *V1alpha1ApplicationMatchExpression) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *V1alpha1ApplicationMatchExpression) SetOperator(v string) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *V1alpha1ApplicationMatchExpression) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1ApplicationMatchExpression) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *V1alpha1ApplicationMatchExpression) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *V1alpha1ApplicationMatchExpression) SetValues(v []string) {
	o.Values = &v
}

func (o V1alpha1ApplicationMatchExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1ApplicationMatchExpression struct {
	value *V1alpha1ApplicationMatchExpression
	isSet bool
}

func (v NullableV1alpha1ApplicationMatchExpression) Get() *V1alpha1ApplicationMatchExpression {
	return v.value
}

func (v *NullableV1alpha1ApplicationMatchExpression) Set(val *V1alpha1ApplicationMatchExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1ApplicationMatchExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1ApplicationMatchExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1ApplicationMatchExpression(val *V1alpha1ApplicationMatchExpression) *NullableV1alpha1ApplicationMatchExpression {
	return &NullableV1alpha1ApplicationMatchExpression{value: val, isSet: true}
}

func (v NullableV1alpha1ApplicationMatchExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1ApplicationMatchExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


