/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// ProjectProjectCreateRequest ProjectCreateRequest defines project creation parameters.
type ProjectProjectCreateRequest struct {
	Project *V1alpha1AppProject `json:"project,omitempty"`
	Upsert  *bool               `json:"upsert,omitempty"`
}

// NewProjectProjectCreateRequest instantiates a new ProjectProjectCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectProjectCreateRequest() *ProjectProjectCreateRequest {
	this := ProjectProjectCreateRequest{}
	return &this
}

// NewProjectProjectCreateRequestWithDefaults instantiates a new ProjectProjectCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectProjectCreateRequestWithDefaults() *ProjectProjectCreateRequest {
	this := ProjectProjectCreateRequest{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProjectProjectCreateRequest) GetProject() V1alpha1AppProject {
	if o == nil || o.Project == nil {
		var ret V1alpha1AppProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectCreateRequest) GetProjectOk() (*V1alpha1AppProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProjectProjectCreateRequest) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given V1alpha1AppProject and assigns it to the Project field.
func (o *ProjectProjectCreateRequest) SetProject(v V1alpha1AppProject) {
	o.Project = &v
}

// GetUpsert returns the Upsert field value if set, zero value otherwise.
func (o *ProjectProjectCreateRequest) GetUpsert() bool {
	if o == nil || o.Upsert == nil {
		var ret bool
		return ret
	}
	return *o.Upsert
}

// GetUpsertOk returns a tuple with the Upsert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectCreateRequest) GetUpsertOk() (*bool, bool) {
	if o == nil || o.Upsert == nil {
		return nil, false
	}
	return o.Upsert, true
}

// HasUpsert returns a boolean if a field has been set.
func (o *ProjectProjectCreateRequest) HasUpsert() bool {
	if o != nil && o.Upsert != nil {
		return true
	}

	return false
}

// SetUpsert gets a reference to the given bool and assigns it to the Upsert field.
func (o *ProjectProjectCreateRequest) SetUpsert(v bool) {
	o.Upsert = &v
}

func (o ProjectProjectCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Upsert != nil {
		toSerialize["upsert"] = o.Upsert
	}
	return json.Marshal(toSerialize)
}

type NullableProjectProjectCreateRequest struct {
	value *ProjectProjectCreateRequest
	isSet bool
}

func (v NullableProjectProjectCreateRequest) Get() *ProjectProjectCreateRequest {
	return v.value
}

func (v *NullableProjectProjectCreateRequest) Set(val *ProjectProjectCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectProjectCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectProjectCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectProjectCreateRequest(val *ProjectProjectCreateRequest) *NullableProjectProjectCreateRequest {
	return &NullableProjectProjectCreateRequest{value: val, isSet: true}
}

func (v NullableProjectProjectCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectProjectCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
